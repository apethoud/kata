import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { Flex } from './styles'
import { useEffect, useState } from 'react'
import Card from './components/Card/Card'
import { symbolPool } from './symbolPool'
import { shuffle } from './utils'

const inter = Inter({ subsets: ['latin'] })

const numberOfCards = 10;
const initialCards = [];
for (let i = 0; i < numberOfCards; i++) {
  initialCards.push({ id: i + 1});
}

export default function Home() {
  const [cards, setCards] = useState(initialCards);

  const initializeGame = () => {
    const selectedSymbols = symbolPool.slice(0, initialCards.length / 2);
    const symbolsToAssign = shuffle([...selectedSymbols, ...selectedSymbols]);
    const cardsWithSymbols = initialCards.map((card, index) => {
      card.isFlipped = false;
      card.matched = false;
      card.symbol = symbolsToAssign[index];
      return card;
    })
    setCards(cardsWithSymbols);
  }

  const flipCardById = id => {
    const nextCards = cards.map(card => {
      if (card.id !== id) {
        return card;
      } else {
        card.isFlipped = true;
        return card;
      }
    })
    setCards(nextCards);
  }

  const allCardsAreMatched = allCards => {
    const matchedCards = allCards.filter(card => card.matched === true);
    return cards.length === matchedCards.length;
  }

  useEffect(() => {
    initializeGame();
  }, [])

  useEffect(() => {
    const flippedButNotMatchedCards = cards.filter(card => card.isFlipped && !card.matched);
    // If two cards are flipped,
    if (flippedButNotMatchedCards.length === 2) {
      // If their symbols match, mark each as matched.
      if (flippedButNotMatchedCards[0].symbol === flippedButNotMatchedCards[1].symbol) {
        const nextCards = cards.map(card => {
          if (card.isFlipped && !card.matched) {
            card.matched = true;
          }
          return card;
        })
        setCards(nextCards);
      } 
      // Else wait one second and flip both cards back over.
      else {
        const nextCards = cards.map(card => {
          if (card.isFlipped && !card.matched) {
            card.isFlipped = false;
          }
          return card;
        })
        setCards(nextCards);
      }
    }
  }, [cards])
  
  return (
    <>
      <Head>
        <title>Concentration</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div style={{ fontSize: 24 }}>Concentration</div>
        <Flex>
          {cards.map(card => (
            <Card 
              key={card.id}
              card={card}
              isFlipped={card.isFlipped}
              flipCardById={flipCardById} />
          ))}
        </Flex>
          {allCardsAreMatched(cards) && (
            <>
              <div>You won! ðŸŽ‰</div>
              <button onClick={() => initializeGame()}>New Game</button>
            </>
          )}
      </main>
    </>
  )
}
